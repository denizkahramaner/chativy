<script src="http://static.opentok.com/v1.1/js/TB.min.js" type="text/javascript" charset="utf-8"></script>
<link href="http://static.opentok.com/opentok/assets/css/demos.css" type="text/css" rel="stylesheet" >
<!-- Load the Realtime libraries. -->
<script type="text/javascript"
      src="https://apis.google.com/js/api.js"></script>
<!-- Load the utility library. -->
<%= javascript_include_tag "realtime-client-utils"%>


<h1>Drive Realtime API :: quickstart</h1>

<button id="authorizeButton" disabled>Open chat session with Google Drive</button>

<!-- Text areas that will be used as our collaborative controls. -->
<textarea id="editor1" rows="15" cols="50" disabled="true"></textarea>
<textarea id="editor2" rows="15" cols="50" disabled="true"></textarea>

<!-- GOOGLE CHAT START -->
<script>
  /**
   * This function is called the first time that the Realtime model is created
   * for a file. This function should be used to initialize any values of the
   * model. In this case, we just create the single string model that will be
   * used to control our text box. The string has a starting value of 'Hello
   * Realtime World!', and is named 'text'.
   * @param model {gapi.drive.realtime.Model} the Realtime root model object.
   */
  function initializeModel(model) {
    var string = model.createString('Hello Chativy User!');
    model.getRoot().set('text', string);
  }

  /**
   * This function is called when the Realtime file has been loaded. It should
   * be used to initialize any user interface components and event handlers
   * depending on the Realtime model. In this case, create a text control binder
   * and bind it to our string model that we created in initializeModel.
   * @param doc {gapi.drive.realtime.Document} the Realtime document.
   */
  function onFileLoaded(doc) {
    var string = doc.getModel().getRoot().get('text');

    // Keeping one box updated with a String binder.
    var textArea1 = document.getElementById('editor1');
    gapi.drive.realtime.databinding.bindString(string, textArea1);

    // Keeping one box updated with a custom EventListener.
    var textArea2 = document.getElementById('editor2');
    var updateTextArea2 = function(e) {
      textArea2.value = string;
    };
    string.addEventListener(gapi.drive.realtime.EventType.TEXT_INSERTED, updateTextArea2);
    string.addEventListener(gapi.drive.realtime.EventType.TEXT_DELETED, updateTextArea2);
    textArea2.onkeyup = function() {
      string.setText(textArea2.value);
    };
    updateTextArea2();

    // Enabling UI Elements.
    textArea1.disabled = false;
    textArea2.disabled = false;
  }

  /**
   * Options for the Realtime loader.
   */
  var realtimeOptions = {
    /**
     * Client ID from the APIs Console.
     */
    clientId: '222124421551.apps.googleusercontent.com',

    /**
     * The ID of the button to click to authorize. Must be a DOM element ID.
     */
    authButtonElementId: 'authorizeButton',

    /**
     * Function to be called when a Realtime model is first created.
     */
    initializeModel: initializeModel,

    /**
     * Autocreate files right after auth automatically.
     */
    autoCreate: true,

    /**
     * Autocreate files right after auth automatically.
     */
     defaultTitle: "New Realtime Quickstart File",

    /**
     * Function to be called every time a Realtime file is loaded.
     */
    onFileLoaded: onFileLoaded
  }

  /**
   * Start the Realtime loader with the options.
   */
  function startRealtime() {
    var realtimeLoader = new rtclient.RealtimeLoader(realtimeOptions);
    realtimeLoader.start();
  }
	window.onLoad=startRealtime();

</script>
<!-- GOOGLE CHAT END -->



<!-- VIDEO CONFERENCE START -->
<script>
	API_KEY = '23280692';
  <% if @sessionID != nil %>
    localStorage.sessionID = "<%=@sessionID%>";
    localStorage.token = "<%=@token%>";
  <%end%>
	TB.addEventListener("exception", exceptionHandler);
	var session = TB.initSession(localStorage.sessionID); // Replace with your own session ID. See https://dashboard.tokbox.com/projects
	session.addEventListener("sessionConnected", sessionConnectedHandler);
	session.addEventListener("streamCreated", streamCreatedHandler);
	session.connect(API_KEY, localStorage.token); // Replace with your API key and token. See https://dashboard.tokbox.com/projects
	                                         // 	 and https://dascts
	function sessionConnectedHandler(event) {
		 subscribeToStreams(event.streams);
		 session.publish();
	}
	
	function streamCreatedHandler(event) {
		subscribeToStreams(event.streams);
	}
	
	function subscribeToStreams(streams) {
		for (i = 0; i < streams.length; i++) {
			var stream = streams[i];
			if (stream.connection.connectionId != session.connection.connectionId) {
				session.subscribe(stream);
			}
		}
	}
	
	function exceptionHandler(event) {
		alert("Exception: " + event.code + "::" + event.message);
	}
	
</script>
<!-- END VIDEO CONFERENCE -->